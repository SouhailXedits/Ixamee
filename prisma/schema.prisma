datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String              @id @default(cuid())
  name              String
  first_name        String?
  last_name         String?
  email             String              @unique
  emailVerified     DateTime?
  password          String? //optional because we want to add singup with Google
  role              Role? // Consider using an enum for role
  accounts          Account[] // Many-to-many relationship with Subject
  image             String?
  phone_number      String?
  classes           StudentClass[]
  subjects          TeacherSubject[]
  classe            Classe[]
  subject_id        Int?
  UserEstablishment UserEstablishment[]
  Government        Government?         @relation(fields: [governmentId], references: [id])
  governmentId      Int?
}

enum Term {
  TRIMESTRE
  SEMESTRE
  LIBRE
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// Government Tablez
model Government {
  id         Int    @id @default(autoincrement())
  user_id    User[]
  government String
}

// Establishment Table
model Establishment {
  id                Int                 @id @default(autoincrement())
  name              String
  UserEstablishment UserEstablishment[]
  classes           Classe[]
  ExamEstablishment ExamEstablishment[]
}

model UserEstablishment {
  establishement    Establishment? @relation(fields: [establishement_id], references: [id])
  establishement_id Int // relation scalar field (used in the `@relation` attribute above)
  user              User?          @relation(fields: [user_id], references: [id])
  user_id           String // relation scalar field (used in the `@relation` attribute above)
  assignedAt        DateTime       @default(now())
  assignedBy        String

  @@id([establishement_id, user_id])
}

// Classe Table
model Classe {
  id                    String         @id @default(cuid())
  name                  String
  range                 String
  establishment         Establishment  @relation(fields: [establishment_id], references: [id]) // Many-to-one relationship with Establishment
  establishment_id      Int
  users                 StudentClass[] // Many-to-many relationship with User
  // subjects         Subject[]       // Many-to-many relationship with Subject
  is_archived           Boolean
  ExamClasse            ExamClasse[]
}

model StudentClass {
  class      Classe?  @relation(fields: [classe_id], references: [id])
  classe_id  String // relation scalar field (used in the `@relation` attribute above)
  user       User?    @relation(fields: [user_id], references: [id])
  user_id    String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([classe_id, user_id])
}

// Subject Table
model Subject {
  id    Int              @id @default(autoincrement())
  name  String
  coefficient Float?
  icon  String?
  user  TeacherSubject[] // Many-to-one relationship with Establishment
  exams Exam[] // One-to-many relationship with Exam
}

model TeacherSubject {
  subject    Subject? @relation(fields: [subject_id], references: [id])
  subject_id Int // relation scalar field (used in the `@relation` attribute above)
  user       User?    @relation(fields: [user_id], references: [id])
  user_id    String // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([subject_id, user_id])
}

// Exam Table
model Exam {
  id                Int                 @id @default(autoincrement())
  name              String
  exercises         Exercise[]
  total_mark        Float
  coefficient       Float
  teacher_id        Int // One-to-one relationship with User
  class_id          Int // One-to-one relationship with Classe
  subject           Subject             @relation(fields: [subject_id], references: [id]) // One-to-one relationship with Subject
  subject_id        Int
  examEstablishment ExamEstablishment[]
  term              String?
  ExamCorrection    ExamCorrection[]
  is_archived       Boolean?            @default(false)
  ExamClassess      ExamClasse[]
  // style       String    // Consider using an enum for style
}

model ExamEstablishment {
  establishement    Establishment? @relation(fields: [establishement_id], references: [id])
  establishement_id Int // relation scalar field (used in the `@relation` attribute above)
  exam              Exam?          @relation(fields: [exam_id], references: [id])
  exam_id           Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt        DateTime       @default(now())
  assignedBy        String

  @@id([establishement_id, exam_id])
}

// Exercise Table
model Exercise {
  id                 Int                  @id @default(autoincrement())
  name               String
  exam               Exam?                @relation(fields: [exam_id], references: [id])
  exam_id            Int?
  marks              Float
  parent_id          Int? // Add this field to reference the parent Exercise
  parent             Exercise?            @relation("ExerciseToSubExercise", fields: [parent_id], references: [id])
  subExercises       Exercise[]           @relation("ExerciseToSubExercise")
  question_type      String
  ExerciseCorrection ExerciseCorrection[]
}

model ExamCorrection {
  id            Int   @id @default(autoincrement())
  exam          Exam? @relation(fields: [exam_id], references: [id])
  exam_id       Int
  mark_obtained Float
}


