datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String          @id @default(cuid())
  name               String
  first_name         String?
  last_name          String?
  email              String          @unique
  emailVerified      DateTime?
  password           String? //optional because we want to add singup with Google
  role               Role? // Consider using an enum for role
  accounts           Account[] // Many-to-many relationship with Subject
  image              String?
  phone_number       String?
  classe             Classe[]        @relation("StudentClassToUser")
  classe_teacher     Classe[]        @relation("ClasseClassTeacherToSubject")
  subjects           Subject[]       @relation("ClasseTeacherSubjectToSubject")
  subject_id         Int?
  government         String?
  user_establishment Establishment[] @relation("UserEstablishmentToUser")
  exams              Exam[]          @relation("ExamToUser")
  term               Term?
  range              Int?
  invited_at         DateTime?
  createdAt          DateTime?       @default(now())
}

enum Term {
  TRIMESTRE
  SEMESTRE
  LIBRE
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model InvitationToken {
  id            String   @id @default(cuid())
  recieverEmail String
  senderEmail   String
  token         String   @unique
  expires       DateTime

  @@unique([recieverEmail, senderEmail, token])
}

model Establishment {
  id                 Int      @id @default(autoincrement())
  name               String
  user_establishment User[]   @relation("UserEstablishmentToUser")
  classes            Classe[] @relation("EstablishmentToClasse")
}

// Classe Table
model Classe {
  id            Int             @id @default(autoincrement())
  name          String?
  subject       Subject[]       @relation("ClasseSubjectToSubject")
  range         String?
  establishment Establishment[] @relation("EstablishmentToClasse")
  teacher       User[]          @relation("ClasseClassTeacherToSubject")
  student_class User[]          @relation("StudentClassToUser")
  is_archived   Boolean?        @default(false)
  archived_at   DateTime?
  exam_classe   Exam[]          @relation("ExamClasseToUser")
}

// Subject Table
model Subject {
  id             Int      @id @default(autoincrement())
  name           String
  coefficient    Float?
  icon           String?
  teacher        User[]   @relation("ClasseTeacherSubjectToSubject")
  exams          Exam[]
  is_archived    Boolean? @default(false)
  classe_subject Classe[] @relation("ClasseSubjectToSubject")
}

model Exam {
  id              Int              @id @default(autoincrement())
  name            String
  exercises       Exercise[]
  total_mark      Float
  coefficient     Float
  teacher         User[]           @relation("ExamToUser")
  teacher_id      String?
  subject         Subject          @relation(fields: [subject_id], references: [id], onDelete: Cascade, onUpdate: Cascade) // One-to-one relationship with Subject
  subject_id      Int
  progress        String?          @default("0")
  term            String?
  exam_correction ExamCorrection[]
  is_archived     Boolean?         @default(false)
  archived_at     DateTime?
  exam_classess   Classe[]         @relation("ExamClasseToUser")
  language        Language? // Consider using an enum for style
  create_at       DateTime?        @default(now())
  content         Json?
}

enum Language {
  fr
  ar
}

// Exercise Table
model Exercise {
  id                  Int                  @id @default(autoincrement())
  name                String
  exam                Exam?                @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exam_id             Int?
  marks               Float
  question_type       String
  exercise_correction ExerciseCorrection[]
  is_archived         Boolean?             @default(false)

  questions question[]
}

model question {
  id                  Int                  @id @default(autoincrement())
  name                String
  exercise            Exercise?            @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exercise_id         Int?
  marks               Float
  parent_id           Int? // Add this field to reference the parent Exercise
  parent              question?            @relation("questionToSubquestion", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subquestions        question[]           @relation("questionToSubquestion")
  question_type       String
  content             String?
  exercise_correction QuestionCorrection[]
}

// ExamCorrection Table
model ExamCorrection {
  id            Int   @id @default(autoincrement())
  exam          Exam? @relation(fields: [exam_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exam_id       Int
  mark_obtained Float
}

model ExerciseCorrection {
  id            Int       @id @default(autoincrement())
  exercise      Exercise? @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exercise_id   Int
  content       String?
  mark_obtained Float
}

model QuestionCorrection {
  id            Int       @id @default(autoincrement())
  question      question? @relation(fields: [exercise_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  exercise_id   Int
  content       String?
  mark_obtained Float
}
