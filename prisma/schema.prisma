datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String          @id @default(cuid())
  name               String
  firstName         String?
  lastName          String?
  email              String          @unique
  emailVerified      DateTime?
  password           String?
  role               Role?
  accounts           Account[]
  image              String?
  phoneNumber        String?
  classes            Classe[]        @relation(name: "StudentClassToUser")
  classeTeacher      Classe[]        @relation(name: "ClasseClassTeacherToSubject")
  subjects           Subject[]       @relation(name: "ClasseTeacherSubjectToSubject")
  subjectId          Int?
  government         String?
  userEstablishments Establishment[] @relation(name: "UserEstablishmentToUser")
  exams              Exam[]          @relation(name: "ExamToUser")
  term               Term?
  range              Int?
  invitedAt          DateTime?
  createdAt          DateTime?       @default(now())
  examCorrections    ExamCorrection[]
  examPlans          ExamPlans[]

  @@index([email], unique: true)
}

enum Term {
  TRIMESTRE
  SEMESTRE
  LIBRE
}

enum Role {
  STUDENT
  TEACHER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model InvitationToken {
  id            String   @id @default(cuid())
  recieverEmail String
  senderEmail   String
  token         String   @unique
  expires       DateTime

  @@unique([recieverEmail, senderEmail, token])
}

model Establishment {
  id          Int      @id @default(autoincrement())
  name        String
  userEstablishments User[] @relation(name: "UserEstablishmentToUser")
  classes     Classe[] @relation(name: "EstablishmentToClasse")
  examPlans   ExamPlans[]

  @@index([name], unique: true)
}

model UserClasseInfos {
  id            Int    @id @default(autoincrement())
  userId        String?
  classeId      Int?
  subjectId     Int?
  average       Float?
  rankInClasse  Int?

  @@index([userId, classeId, subjectId], unique: true)
}

model Classe {
  id            Int             @id @default(autoincrement())
  name          String?
  subjects      Subject[]       @relation(name: "ClasseSubjectToSubject")
  range         String?
  establishment Establishment[] @relation(name: "EstablishmentToClasse")
  teachers      User[]          @relation(name: "ClasseClassTeacherToSubject")
  students      User[]          @relation(name: "StudentClassToUser")
  isArchived    Boolean?        @default(false)
  archivedAt    DateTime?
  createdAt     DateTime?       @default(now())
  examClasses   Exam[]          @relation(name: "ExamClasseToUser")
  examPlans     ExamPlans[]

  @@index([name], unique: true)
}

model Subject {
  id             Int      @id @default(autoincrement())
  name           String
  coefficient    Float?
  icon           String?
  teachers       User[]   @relation(name: "ClasseTeacherSubjectToSubject")
  exams          Exam[]
  isArchived     Boolean? @default(false)
  classeSubjects Classe[] @relation(name: "ClasseSubjectToSubject")
  examPlans      ExamPlans[]

  @@index([name], unique: true)
}

model Exam {
  id              Int              @id @default(autoincrement())
  name            String
  totalMark       Float
  coefficient     Float
  teachers        User[]           @relation(name: "ExamToUser")
  teacherId       String?
  subject         Subject          @relation(name: "ExamToSubject", fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId       Int
  progress        String?          @default("0")
  term            Term?
  examCorrections ExamCorrection[]
  isArchived      Boolean?         @default(false)
  archivedAt      DateTime?
  examClasses     Classe[]         @relation(name: "ExamClasseToUser")
  language        Language?
  createdAt       DateTime?        @default(now())
  content         Json?

  @
